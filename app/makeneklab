#!/bin/bash
set -a

# Compiler and architecture settings
#FC=""
#CC=""
#FFLAGS=""
#USR_LFLAGS=""
#ar=""

# Fetch version information for user reference
N_VERSION=$(git -C $NEK_SOURCE_ROOT describe --tag --long --always)
NS_VERSION=$(git -C $NEKLAB_SOURCE_ROOT describe --tag --long --always)

#-------------------------------------------------------------------------------
# Compiler Detection
#-------------------------------------------------------------------------------
if command -v mpiifort >/dev/null 2>&1; then
    # Intel compiler found
    echo "Intel compiler found: $(mpiifort -v)"
    FC="mpiifort"
    CC="mpiicc"
    FFLAGS+=" -extend-source" # Enables long lines.
    FFLAGS+=" -fixed" # Enables fixed-form source code, necessary as we mix .f90 files.
    
    if [[ $(mpiicx --version 2>&1) =~ "oneapi" ]]; then
        FFLAGS+=" -qmkl"
        CC="mpiicx"
        CFLAGS+=" -w"
    else
        FFLAGS+=" -mkl -xHost"
    fi

    FFLAGS+=" -g -traceback"
    USR_LFLAGS+=" -I${MKLROOT}/include -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_ilp64.a ${MKLROOT}/lib/intel64/libmkl_sequential.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread -lm -ldl"
else
    if [[ "$(uname)" == "Darwin" ]]; then
        # On macOS with Homebrew's mpif90
        if [[ -f "/opt/homebrew/bin/mpif90" ]]; then
            echo "Homebrew mpif90 found"
            FC="/opt/homebrew/bin/mpif90"
        else
            echo "Clang compiler found: $(clang --version | head -n1)"
        fi
    else
        # On Linux, we expect gcc to be gcc
        echo "GCC compiler found: $(gcc --version | head -n1)"
    fi
    FC="mpifort"
    CC="mpicc"
    FFLAGS+=" -ffixed-form" # Enables fixed-form source code, necessary as we mix .f90 files.
    FFLAGS+=" -ffixed-line-length-none" # Allows for any line length in fixed-form source code.
    FFLAGS+=" -march=native" # Enables all instruction subsets supported by the local machine.
    FFLAGS+=" -mtune=native" # Enables all instruction subsets supported by the local machine.
    FFLAGS+=" -g" # Enables debugging information.
    FFLAGS+=" -fbacktrace" # Provides a backtrace in case of errors, useful for debugging.
    FFLAGS+=" -std=legacy -Wall" # Provides a backtrace in case of errors, useful for debugging.
    
fi

#-------------------------------------------------------------------------------
# Linking with LAPACK and BLAS
#-------------------------------------------------------------------------------

export PPLIST="VENDOR_BLAS"

# Lapack is a library of linear algebra routines.
# Blas (Basic Linear Algebra Subprograms) is used by Lapack.

export USR_LFLAGS+=" -llapack -lblas"

#export USR_LFLAGS+=" -L/usr/local/opt/openblas/lib"
#export FFLAGS+=" -I/usr/local/opt/openblas/include"
#export USR_LFLAGS+=" -lopenblas" # OpenBlas is a faster alternative to LAPACK and BLAS

#-------------------------------------------------------------------------------
# Linking with LightKrylov library
#-------------------------------------------------------------------------------
export USR_LFLAGS+=" -lLightKrylov"
export USR_LFLAGS+=" -L$HOME/.local/lib -lLightKrylov"
export FFLAGS+=" -I$HOME/.local/include"

#-------------------------------------------------------------------------------
# Architecture Detection
#-------------------------------------------------------------------------------
case $(uname -s) in
    Darwin)
        case $(uname -p) in
            x86_64) ar="x86_64" ;;
            arm)    ar="arm" ;; # not compatile with mcmodel=large
        esac
        ;;
    Linux)
        case $(uname -p) in
            x86_64) ar="x86_64"; FFLAGS+=" -mcmodel=large" ;;
            arm)    ar="arm" ;;
        esac
        ;;
esac

#-------------------------------------------------------------------------------
# Final Preparations
#-------------------------------------------------------------------------------
FFLAGS+=" -DNVERSION=\"'${N_VERSION}'\" -DNSVERSION=\"'${NS_VERSION}'\""
export FFLAGS

# Update makefile and static variables
echo "include $NEKLAB_SOURCE_ROOT/src/makefile_neklab" > makefile_usr.inc

# User-specified object files
USR="neklab_vectors.o"
USR+=" real_vectors.o"
USR+=" real_extended_vectors.o"
USR+=" complex_vectors.o"
USR+=" neklab_utils.o"
USR+=" neklab_nek_setup.o"
USR+=" neklab_nek_forcing.o"
USR+=" neklab_linops.o"
USR+=" exponential_propagator.o"
USR+=" exponential_propagator_proj.o"
USR+=" resolvent.o"
USR+=" neklab_systems.o"
USR+=" fixed_point.o"
USR+=" periodic_orbit.o"
USR+=" neklab_otd.o"
USR+=" neklab_analysis.o"
USR+=" neklab.o"
export USR

# Output summary of settings
echo ""
echo "  compilation script: $0"
echo "  Nek5000 version:    $N_VERSION"
echo "  neklab version:     $NS_VERSION"
echo "  preparing compilation with:"
echo "      compiler:     $(which $FC)"
echo "      flags:      $FFLAGS"
echo "      link-flags: $USR_LFLAGS"
echo "  USR = $USR"
echo ""

set +a -e
$NEK_SOURCE_ROOT/bin/nekconfig $@
if [[ $1 != "clean" ]]; then
 $NEK_SOURCE_ROOT/bin/nekconfig -build-dep
 set -o pipefail
 touch $1.usr 
 make -j4 2>&1 | tee -a build.log
 set +o pipefail
fi

if [ $(ls *.mod 2>/dev/null | wc -l) -gt 0 ]; then
    mv *.mod obj/
fi
if [ $(ls *.smod 2>/dev/null | wc -l) -gt 0 ]; then
    mv *.smod obj/
fi