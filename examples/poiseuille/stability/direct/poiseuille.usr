      subroutine userchk

      use stdlib_io_npy
      use neklab
      use neklab_nek_setup, only: nek_log_message
      implicit none
      include "SIZE"
      include "TOTAL"

      ! input/output
      type(nek_dvector) :: bf
      type(exptA_linop) :: exptA
      integer, parameter :: kdim = 128, nev = 20

      real(dp) :: alpha, beta
      real(dp), allocatable :: eig(:,:)
      character(len=128) :: msg
      integer :: i, n
      
      real :: glsc3
      
      if (istep.eq.0) then
            call nek2vec(bf, vx, vy, vz, pr, t)

         ! Exponential propagator.
         exptA = exptA_linop(1.0_dp, bf) ; call exptA%init()

         ! Stability analysis.
         call linear_stability_analysis_fixed_point(exptA, kdim, nev)

         ! post-processing
         call load_npy("dir_eigenspectrum.npy", eig)
	      call nek_log_message('Converged eigenvalues:', procedure='userchk')
	      write(msg,'(8X,3(A16))') 'Re(lambda)', 'Im(lambda)', 'residual'
	      call nek_log_message(msg, procedure='userchk')
         do i = 1, size(eig(:,1))
            write(msg,'(3X,I3,A,*(F16.12))') i, ': ', eig(i,:)
		   call nek_log_message(msg, procedure='userchk')
         end do
      end if
      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)

      implicit none

      include 'SIZE'
      include 'NEKUSE'          ! UDIFF, UTRANS

      integer ix,iy,iz,ieg

      UDIFF =0.
      UTRANS=0.

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)

      use neklab, only: neklab_forcing
      implicit none
      include 'SIZE'
      include 'SOLN'            ! jp
      include 'NEKUSE'          ! FFX, FFY, FFZ
      include 'PARALLEL'        ! GLLEL
      integer ix,iy,iz,ieg
!
      FFX = 0.0 
      FFY = 0.0 
      FFZ = 0.0 

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)

      implicit none

      include 'SIZE'
      include 'NEKUSE'          ! QVOL

      integer ix,iy,iz,ieg

      QVOL   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,eg)

      implicit none

      include 'SIZE'
      include 'NEKUSE'          ! UX, UY, UZ, TEMP, X, Y
      include 'SOLN'            ! jp

      integer ix,iy,iz,iside,eg

      if (jp.eq.0) then
c     baseflow
        if (cbu.eq.'v  ') then
          UX = 0.0
          UY = 0.0
          UZ = 0.0
        endif
      else
c     perturbations
        UX = 0.0
        UY = 0.0
        UZ = 0.0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)

      implicit none

      include 'SIZE'
      include 'INPUT'
      include 'NEKUSE'          ! UX, UY, UZ, TEMP, Z
      include 'SOLN'            ! JP
      include 'PARALLEL'        ! gllel

      integer ix,iy,iz,ieg
      integer ie, ijke
      real pi, shape

      real, parameter :: alpha = 1.0d0
	real, parameter :: stdev = 0.1d0
	real, parameter :: amplitude = 1.0d0

      ie = gllel(ieg)

      pi = 4.0*atan(1.0)

c     velocity
c     base flow
      if (jp.eq.0) then
        UX = (1.0-Y**2)
        UY = 0.0
        UZ = 0.0
      else
c     perturbation           
        ux = 0.0d0
        uy = 0.0d0
        uz = 0.0d0
        temp = 0.0d0
      endif

      return
      end
c-----------------------------------------------------------------------
c     This routine to modify element vertices
      subroutine usrdat

      implicit none

      include 'SIZE'
      include 'TOTAL'

      real glmin,glmax
           
      real fact,x_min,x_max,y_max,y_min,z_min,z_max
      integer n

      n = 8*nelv
      
      fact = 4.*atan(1.)
      call cmult(xc,fact,n)
      if (if3d) then    
        call cmult(zc,fact,n)
      endif     

      x_min=glmin(xc,n)
      y_min=glmin(yc,n)
      x_max=glmax(xc,n)
      y_max=glmax(yc,n)
      if (if3d) then
        z_min=glmin(zc,n)
        z_max=glmax(zc,n)
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      implicit none
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      implicit none

      return
      end
