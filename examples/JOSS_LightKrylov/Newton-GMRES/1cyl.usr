c-----------------------------------------------------------------------
      subroutine userchk
      use LightKrylov_Timing, only: timer => global_lightkrylov_timer
      use neklab
      include "SIZE"
      include "TOTAL"

      ! State vectors
      type(nek_dvector) :: bf
      ! System for which we seek a fixed point
      type(nek_system), allocatable :: sys
      ! Tolerance for the Newton solver
      real(dp) :: tol
      ! Tolerance scheduler setting
      integer :: tol_mode
      
      if (istep.eq.0) then           
         ! Load initial guess.
	      call load_fld('BF_1cyl_Re_40.fld')
         call nek2vec(bf, vx, vy, vz, pr, t)
         
         ! Define system.
         sys = nek_system()
         sys%jacobian = nek_jacobian()
         sys%jacobian%X = bf
			
         ! Set Newton tolerance.
         tol = 1.0e-8_dp
         ! Set dynamic tolerances.
	      tol_mode = 2
         
         ! Compute fixed point.
         call newton_fixed_point_iteration(sys, bf, tol, tol_mode)

         ! Outpost solution.
         call outpost_dnek(bf, "BF_")

         call nek_end()
      end if

      return
      end
c----------------------------------------------------------------------
      subroutine userf (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ffx = 0.0d0
      ffy = 0.0d0
      ffz = 0.0d0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e

      if (JP.eq.0) then         ! velocity
         e  = gllel(ieg)
         ux=1.0d0
         uy=0.0d0
         uz=0.0d0
         temp=0.0d0
      else                      ! perturbation
         ux = 0.0d0
         uy = 0.0d0
         uz = 0.0d0
         temp = 0.0d0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e

      if (JP.eq.0) then         ! velocity
         e  = gllel(ieg)
         ux = 1.0d0
         uy = 0.0d0
         uz = 0.0d0
         temp=0.0d0

      else                      ! perturbation
         ux = 0.0d0
         uy = 0.0d0
         uz = 0.0d0
         temp = 0.0d0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      udiff = 0.0d0
      utrans = 0.0d0
      return
      end
c-----------------------------------------------------------------------
      subroutine userq (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      qvol = 0.0d0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
      integer iel,ifc
      
      !this mesh was generatd with genbox
      !with only BCs for velicity
      !here we chenge outflow to dirichlet if adjoint
      !and initilize BCs for scalar field

      if(uparam(1)==3.2)then !if adjoint, change BCs
      do iel=1,nelt
      do ifc = 1, 2*ndim
        if(cbc(ifc,iel,1).eq.'O  ')cbc(ifc,iel,1)='v  '
      enddo
      enddo
      endif

      if(ifheat)then
      cbc(:,:,2)=cbc(:,:,1)
      do iel=1,nelt
       do ifc = 1, 2*ndim
        if(cbc(ifc,iel,1).eq.'W  ')cbc(ifc,iel,2)='t  '
        if(cbc(ifc,iel,1).eq.'v  ')cbc(ifc,iel,2)='t  '
      enddo
      enddo
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end